# Bundle provides ...
#!/usr/bin/env ruby3.1
# frozen_string_literal: true

require 'rubygems'

module BundlerScript
  module_function

  def invoked_as_script?
    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
  end

  def bundle_update_command?
    ARGV.first&.start_with?('update')
  end

  def find_bundler_version
    bundler_version = nil
    update_index = nil

    ARGV.each_with_index do |arg, index|
      if update_index && update_index.succ == index && arg =~ Gem::Version::ANCHORED_VERSION_PATTERN
        bundler_version = arg
      end

      next unless arg =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/

      bundler_version = Regexp.last_match(1)
      update_index = index
    end

    bundler_version
  end

  def cli_arg_version
    return unless invoked_as_script?
    return unless bundle_update_command?

    find_bundler_version
  end

  def gemfile
    gemfile_path = ENV['BUNDLE_GEMFILE']
    return gemfile_path unless gemfile_path.to_s.empty?

    File.expand_path('../Gemfile', __dir__)
  end

  def lockfile
    lockfile_path =
      case File.basename(gemfile)
      when 'gems.rb' then gemfile.sub(/\.rb$/, '.locked')
      else "#{gemfile}.lock"
      end

    File.expand_path(lockfile_path)
  end

  def lockfile_version
    return unless File.file?(lockfile)

    lockfile_contents = File.read(lockfile)

    return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/

    Regexp.last_match(1)
  end

  def bundler_requirement
    @bundler_requirement ||=
      ENV['BUNDLER_VERSION'] ||
      cli_arg_version ||
      bundler_requirement_for(lockfile_version)
  end

  def bundler_requirement_for(version)
    return "#{Gem::Requirement.default}.a" unless version

    bundler_gem_version = Gem::Version.new(version)

    bundler_gem_version.approximate_recommendation
  end

  def load_bundler!
    ENV['BUNDLE_GEMFILE'] ||= gemfile
    activate_bundler
  end

  def activate_bundler
    gem_error = activation_error_handling { gem 'bundler', bundler_requirement }

    return if gem_error.nil?

    require_error = activation_error_handling { require 'bundler/version' }

    if require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
      return
    end

    warn "Activating bundler (#{bundler_requirement}) failed:\n#{gem_error.message}\n\nTo install the version of bundler this project requires, run `gem install bundler -v '#{bundler_requirement}'`"
    exit 42
  end

  def activation_error_handling
    yield
    nil
  rescue StandardError, LoadError => e
    e
  end
end

BundlerScript.load_bundler!

load Gem.bin_path('bundler', 'bundle') if BundlerScript.invoked_as_script?
